{
    "parserOptions": {
        "ecmaVersion": 9, // set to 3, 5 (default), 6, 7, 8, 9, or 10 to specify the version of ECMAScript syntax you want to use. You can also set to 2015 (same as 6), 2016 (same as 7), 2017 (same as 8), 2018 (same as 9), or 2019 (same as 10) to use the year-based naming.
        "sourceType": "script", // set to "script" (default) or "module" if your code is in ECMAScript modules.
        "ecmaFeatures": {
            "globalReturn": false, // allow return statements in the global scope
            "impliedStrict": false, // enable global strict mode (if ecmaVersion is 5 or greater)
            "jsx": false // enable JSX
        }
    },

    // http://eslint.org/docs/rules/

    "env": {
        "browser": true, // browser global variables.
        "node": true, // Node.js global variables and Node.js-specific rules.
        "commonjs": false, // CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack).
        "shared-node-browser": true, // Globals common to both Node and Browser.
        "es6": true, // enable all ECMAScript 6 features except for modules.
        "worker": false, // web workers global variables.
        "amd": false, // defines require() and define() as global variables as per the amd spec.
        "mocha": false, // adds all of the Mocha testing global variables.
        "jasmine": false, // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
        "phantomjs": false, // phantomjs global variables.
        "jquery": true, // jquery global variables.
        "prototypejs": false, // prototypejs global variables.
        "shelljs": false // shelljs global variables.
    },

    "globals": {
        // e.g. "angular": true
    },

    "plugins": [
        // e.g. "react" (must run `npm install eslint-plugin-react` first)
    ],

    "rules": {
        /********* Possible Errors *********/

        "for-direction": 0, // enforce “for” loop update clause moving the counter in the right direction.
        "getter-return": 0, // enforce return statements in getters
        "no-async-promise-executor": 0, // disallow using an async function as a Promise executor
        "no-await-in-loop": 0, // disallow await inside of loops
        "no-compare-neg-zero": 0, // disallow comparing against -0
        "no-cond-assign": 0, // disallow assignment in conditional expressions
        "no-console": 0, // disallow use of console (off by default in the node environment)
        "no-constant-condition": 0, // disallow use of constant expressions in conditions
        "no-control-regex": 0, // disallow control characters in regular expressions
        "no-debugger": 0, // disallow use of debugger
        "no-dupe-args": 0, // disallow duplicate arguments in function definitions
        "no-dupe-keys": 0, // disallow duplicate keys when creating object literals
        "no-duplicate-case": 0, // disallow duplicate case labels
        "no-empty": 0, // disallow empty statements
        "no-empty-character-class": 0, // disallow empty character classes in regular expressions
        "no-ex-assign": 0, // disallow assigning to the exception in a catch block
        "no-extra-boolean-cast": 0, // disallow double-negation boolean casts in a boolean context
        "no-extra-parens": 0, // disallow unnecessary parentheses (off by default)
        "no-extra-semi": 0, // disallow unnecessary semicolons
        "no-func-assign": 0, // disallow overwriting functions written as function declarations
        "no-inner-declarations": 0, // disallow function or variable declarations in nested blocks
        "no-invalid-regexp": 0, // disallow invalid regular expression strings in the RegExp constructor
        "no-irregular-whitespace": 0, // disallow irregular whitespace outside of strings and comments
        "no-misleading-character-class": 0, // disallow characters which are made with multiple code points in character class syntax
        "no-obj-calls": 0, // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-prototype-builtins": 0, // disallow calling some Object.prototype methods directly on objects
        "no-regex-spaces": 0, // disallow multiple spaces in a regular expression literal
        "no-sparse-arrays": 0, // disallow sparse arrays
        "no-template-curly-in-string": 0, // disallow template literal placeholder syntax in regular strings
        "no-unexpected-multiline": 0, // disallow confusing multiline expressions
        "no-unreachable": 0, // disallow unreachable statements after a return, throw, continue, or break statement
        "no-unsafe-finally": 0, // disallow control flow statements in finally blocks
        "no-unsafe-negation": 0, // disallow negating the left operand of relational operators
        "require-atomic-updates": 0, // disallow assignments that can lead to race conditions due to usage of await or yield
        "use-isnan": 0, // disallow comparisons with the value NaN
        "valid-typeof": 0, // Ensure that the results of typeof are compared against a valid string

        /********* Best Practices *********/

        "accessor-pairs": 0, // enforce getter and setter pairs in objects
        "array-callback-return": 0, // enforce return statements in callbacks of array methods
        "block-scoped-var": 0, // treat var statements as if they were block scoped (off by default)
        "class-methods-use-this": 0, // enforce that class methods utilize this
        "complexity": 0, // specify the maximum cyclomatic complexity allowed in a program (off by default)
        "consistent-return": 0, // require return statements to either always or never specify values
        "curly": 0, // specify curly brace conventions for all control statements
        "default-case": 0, // require default case in switch statements (off by default)
        "dot-location": 0, // enforce consistent newlines before and after dots
        "dot-notation": 0, // encourages use of dot notation whenever possible
        "eqeqeq": 0, // require the use of === and !==
        "guard-for-in": 0, // make sure for-in loops have an if statement (off by default)
        "max-classes-per-file": 0, // enforce a maximum number of classes per file
        "no-alert": 0, // disallow the use of alert, confirm, and prompt
        "no-caller": 0, // disallow use of arguments.caller or arguments.callee
        "no-case-declarations": 0, // disallow lexical declarations in case clauses
        "no-div-regex": 0, // disallow division operators explicitly at beginning of regular expression (off by default)
        "no-else-return": 0, // disallow else after a return in an if (off by default)
        "no-empty-function": 0, // disallow empty functions
        "no-empty-pattern": 0, // disallow empty destructuring patterns
        "no-eq-null": 0, // disallow comparisons to null without a type-checking operator (off by default)
        "no-eval": 0, // disallow use of eval()
        "no-extend-native": 0, // disallow adding to native types
        "no-extra-bind": 0, // disallow unnecessary function binding
        "no-extra-label": 0, // disallow unnecessary labels
        "no-fallthrough": 0, // disallow fallthrough of case statements
        "no-floating-decimal": 0, // disallow the use of leading or trailing decimal points in numeric literals (off by default)
        "no-global-assign": 0, // disallow assignments to native objects or read-only global variables
        "no-implicit-coercion": 0, // disallow shorthand type conversions
        "no-implicit-globals": 0, // disallow variable and function declarations in the global scope
        "no-implied-eval": 0, // disallow use of eval()-like methods
        "no-invalid-this": 0, // disallow this keywords outside of classes or class-like objects
        "no-iterator": 0, // disallow usage of __iterator__ property
        "no-labels": 0, // disallow use of labeled statements
        "no-lone-blocks": 0, // disallow unnecessary nested blocks
        "no-loop-func": 0, // disallow creation of functions within loops
        "no-magic-numbers": 0, // disallow magic numbers
        "no-multi-spaces": 0, // disallow use of multiple spaces
        "no-multi-str": 0, // disallow use of multiline strings
        "no-new": 0, // disallow use of new operator when not part of the assignment or comparison
        "no-new-func": 0, // disallow use of new operator for Function object
        "no-new-wrappers": 0, // disallows creating new instances of String, Number, and Boolean
        "no-octal": 0, // disallow use of octal literals
        "no-octal-escape": 0, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-param-reassign": 0, // disallow reassigning function parameters
        "no-proto": 0, // disallow usage of __proto__ property
        "no-redeclare": 0, // disallow declaring the same variable more then once
        "no-restricted-properties": 0, // disallow certain properties on certain objects
        "no-return-assign": 0, // disallow use of assignment in return statement
        "no-return-await": 0, // disallow unnecessary return await
        "no-script-url": 0, // disallow use of javascript: urls.
        "no-self-assign": 0, // disallow assignments where both sides are exactly the same
        "no-self-compare": 0, // disallow comparisons where both sides are exactly the same (off by default)
        "no-sequences": 0, // disallow use of comma operator
        "no-throw-literal": 0, // disallow throwing literals as exceptions
        "no-unmodified-loop-condition": 0, // disallow unmodified loop conditions
        "no-unused-expressions": 0, // disallow usage of expressions in statement position
        "no-unused-labels": 0, // disallow unused labels
        "no-useless-call": 0, // disallow unnecessary calls to .call() and .apply()
        "no-useless-catch": 0, // disallow unnecessary catch clauses
        "no-useless-concat": 0, // disallow unnecessary concatenation of literals or template literals
        "no-useless-escape": 0, // disallow unnecessary escape characters
        "no-useless-return": 0, // disallow redundant return statements
        "no-void": 0, // disallow use of void operator (off by default)
        "no-warning-comments": 0, // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
        "no-with": 0, // disallow use of the with statement
        "prefer-named-capture-group": 0, // enforce using named capture group in regular expression
        "prefer-promise-reject-errors": 0, // require using Error objects as Promise rejection reasons
        "radix": 0, // require use of the second argument for parseInt() (off by default)
        "require-await": 0, // disallow async functions which have no await expression
        "require-unicode-regexp": 0, // enforce the use of u flag on RegExp
        "vars-on-top": 0, // requires to declare all vars on top of their containing scope (off by default)
        "wrap-iife": 0, // require immediate function invocation to be wrapped in parentheses (off by default)
        "yoda": 0, // require or disallow Yoda conditions

        /********* Strict Mode *********/

        "strict": 0, // controls location of Use Strict Directives

        /********* Variables *********/

        "init-declarations": 0, // require or disallow initialization in variable declarations
        "no-delete-var": 0, // disallow deletion of variables
        "no-label-var": 0, // disallow labels that share a name with a variable
        "no-restricted-globals": 0, // disallow specified global variables
        "no-shadow": 0, // disallow declaration of variables already declared in the outer scope
        "no-shadow-restricted-names": 0, // disallow shadowing of names such as arguments
        "no-undef": 0, // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef-init": 0, // disallow use of undefined when initializing variables
        "no-undefined": 0, // disallow use of undefined variable (off by default)
        "no-unused-vars": 0, // disallow declaration of variables that are not used in the code
        "no-use-before-define": 0, // disallow use of variables before they are defined

        /********* Node.js and CommonJS *********/

        "callback-return": 0, // require return statements after callbacks
        "global-require": 0, // require require() calls to be placed at top-level module scope
        "handle-callback-err": 0, // enforces error handling in callbacks (off by default) (on by default in the node environment)
        "no-buffer-constructor": 0, // disallow use of the Buffer() constructor
        "no-mixed-requires": 0, // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
        "no-new-require": 0, // disallow use of new operator with the require function (off by default) (on by default in the node environment)
        "no-path-concat": 0, // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
        "no-process-env": 0, // disallow use of process.env (off by default)
        "no-process-exit": 0, // disallow process.exit() (on by default in the node environment)
        "no-restricted-modules": 0, // restrict usage of specified node modules (off by default)
        "no-sync": 0, // disallow use of synchronous methods (off by default)

        /********* Stylistic Issues *********/

        "array-bracket-newline": 0, // enforce linebreaks after opening and before closing array brackets
        "array-bracket-spacing": 0, // enforce consistent spacing inside array brackets
        "array-element-newline": 0, // enforce line breaks after each array element
        "block-spacing": 0, // disallow or enforce spaces inside of blocks after opening block and before closing block
        "brace-style": 0, // enforce one true brace style (off by default)
        "camelcase": 0, // require camel case names
        "capitalized-comments": 0, // enforce or disallow capitalization of the first letter of a comment
        "comma-dangle": 0, // require or disallow trailing commas
        "comma-spacing": 0, // enforce spacing before and after comma
        "comma-style": 0, // enforce one true comma style (off by default)
        "computed-property-spacing": 0, // enforce consistent spacing inside computed property brackets
        "consistent-this": 0, // enforces consistent naming when capturing the current execution context (off by default)
        "eol-last": 0, // enforce newline at the end of file, with no multiple empty lines
        "func-call-spacing": 0, // require or disallow spacing between function identifiers and their invocations
        "func-name-matching": 0, // require function names to match the name of the variable or property to which they are assigned
        "func-names": 0, // require function expressions to have a name (off by default)
        "func-style": 0, // enforces use of function declarations or expressions (off by default)
        "function-paren-newline": 0, // enforce consistent line breaks inside function parentheses
        "id-blacklist": 0, // disallow specified identifiers
        "id-length": 0, // enforce minimum and maximum identifier lengths
        "id-match": 0, // require identifiers to match a specified regular expression
        "implicit-arrow-linebreak": 0, // enforce the location of arrow function bodies
        "indent": 0, // enforce consistent indentation
        "jsx-quotes": 0, // enforce the consistent use of either double or single quotes in JSX attributes
        "key-spacing": 0, // enforces spacing between keys and values in object literal properties
        "keyword-spacing": 0, // enforce consistent spacing before and after keywords
        "line-comment-position": 0, // enforce position of line comments
        "linebreak-style": 0, // enforce consistent linebreak style
        "lines-around-comment": 0, // require empty lines around comments
        "lines-between-class-members": 0, // require or disallow an empty line between class members
        "max-depth": 0, // enforce a maximum depth that blocks can be nested
        "max-len": 0, // enforce a maximum line length
        "max-lines": 0, // enforce a maximum number of lines per file
        "max-lines-per-function": 0, // enforce a maximum number of line of code in a function
        "max-nested-callbacks": 0, // specify the maximum depth callbacks can be nested (off by default)
        "max-params": 0, // enforce a maximum number of parameters in function definitions
        "max-statements": 0, // enforce a maximum number of statements allowed in function blocks
        "max-statements-per-line": 0, // enforce a maximum number of statements allowed per line
        "multiline-comment-style": 0, // enforce a particular style for multiline comments
        "multiline-ternary": 0, // enforce newlines between operands of ternary expressions
        "new-cap": 0, // require a capital letter for constructors
        "new-parens": 0, // disallow the omission of parentheses when invoking a constructor with no arguments
        "newline-per-chained-call": 0, // require a newline after each call in a method chain
        "no-array-constructor": 0, // disallow use of the Array constructor
        "no-bitwise": 0, // disallow bitwise operators
        "no-continue": 0, // disallow continue statements
        "no-inline-comments": 0, // disallow comments inline after code (off by default)
        "no-lonely-if": 0, // disallow if statements as the only statement in else blocks
        "no-mixed-operators": 0, // disallow mixed binary operators
        "no-mixed-spaces-and-tabs": 0, // disallow mixed spaces and tabs for indentation
        "no-multi-assign": 0, // disallow use of chained assignment expressions
        "no-multiple-empty-lines": 0, // disallow multiple empty lines (off by default)
        "no-negated-condition": 0, // disallow negated conditions
        "no-nested-ternary": 0, // disallow nested ternary expressions (off by default)
        "no-new-object": 0, // disallow use of the Object constructor
        "no-ternary": 0, // disallow ternary operators
        "no-trailing-spaces": 0, // disallow trailing whitespace at the end of lines
        "no-underscore-dangle": 0, // disallow dangling underscores in identifiers
        "no-unneeded-ternary": 0, // disallow ternary operators when simpler alternatives exist
        "no-whitespace-before-property": 0, // disallow whitespace before properties
        "nonblock-statement-body-position": 0, // enforce the location of single-line statements
        "object-curly-newline": 0, // enforce consistent line breaks inside braces
        "object-curly-spacing": 0, // enforce consistent spacing inside braces
        "object-property-newline": 0, // enforce placing object properties on separate lines
        "one-var": 0, // enforce variables to be declared either together or separately in functions
        "one-var-declaration-per-line": 0, // require or disallow newlines around variable declarations
        "operator-assignment": 0, // require assignment operator shorthand where possible or prohibit it entirely (off by default)
        "operator-linebreak": 0, // enforce consistent linebreak style for operators
        "padded-blocks": 0, // enforce padding within blocks (off by default)
        "padding-line-between-statements": 0, // require or disallow padding lines between statements
        "prefer-object-spread": 0, // disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.
        "quote-props": 0, // require quotes around object literal property names (off by default)
        "quotes": 0, // specify whether double or single quotes should be used
        "semi": 0, // require or disallow use of semicolons instead of ASI
        "semi-spacing": 0, // enforce consistent spacing before and after semicolons
        "semi-style": 0, // enforce location of semicolons
        "sort-keys": 0, // require object keys to be sorted
        "sort-vars": 0, // sort variables within the same declaration block (off by default)
        "space-before-blocks": 0, // require or disallow space before blocks (off by default)
        "space-before-function-paren": 0, // enforce consistent spacing before function definition opening parenthesis
        "space-in-parens": 0, // require or disallow spaces inside parentheses (off by default)
        "space-infix-ops": 0, // require spaces around operators
        "space-unary-ops": 0, // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
        "spaced-comment": 0, // enforce consistent spacing after the // or /* in a comment
        "switch-colon-spacing": 0, // enforce spacing around colons of switch statements
        "template-tag-spacing": 0, // require or disallow spacing between template tags and their literals
        "unicode-bom": 0, // require or disallow Unicode byte order mark (BOM)
        "wrap-regex": 0, // require regex literals to be wrapped in parentheses (off by default)

        /********* ECMAScript 6 *********/

        "arrow-body-style": 0, // require braces around arrow function bodies
        "arrow-parens": 0, // require parentheses around arrow function arguments
        "arrow-spacing": 0, // enforce consistent spacing before and after the arrow in arrow functions
        "constructor-super": 0, // require super() calls in constructors
        "generator-star-spacing": 0, // enforce consistent spacing around * operators in generator functions
        "no-class-assign": 0, // disallow reassigning class members
        "no-confusing-arrow": 0, // disallow arrow functions where they could be confused with comparisons
        "no-const-assign": 0, // disallow reassigning const variables
        "no-dupe-class-members": 0, // disallow duplicate class members
        "no-duplicate-imports": 0, // disallow duplicate module imports
        "no-new-symbol": 0, // disallow new operators with the Symbol object
        "no-restricted-imports": 0, // disallow specified modules when loaded by import
        "no-this-before-super": 0, // disallow this/super before calling super() in constructors
        "no-useless-computed-key": 0, // disallow unnecessary computed property keys in object literals
        "no-useless-constructor": 0, // disallow unnecessary constructors
        "no-useless-rename": 0, // disallow renaming import, export, and destructured assignments to the same name
        "no-var": 0, // require let or const instead of var (off by default)
        "object-shorthand": 0, // require or disallow method and property shorthand syntax for object literals
        "prefer-arrow-callback": 0, // require using arrow functions for callbacks
        "prefer-const": 0, // require const declarations for variables that are never reassigned after declared
        "prefer-destructuring": 0, // require destructuring from arrays and/or objects
        "prefer-numeric-literals": 0, // disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals
        "prefer-rest-params": 0, // require rest parameters instead of arguments
        "prefer-spread": 0, // require spread operators instead of .apply()
        "prefer-template": 0, // require template literals instead of string concatenation
        "require-yield": 0, // require generator functions to contain yield
        "rest-spread-spacing": 0, // enforce spacing between rest and spread operators and their expressions
        "sort-imports": 0, // enforce sorted import declarations within modules
        "symbol-description": 0, // require symbol descriptions
        "template-curly-spacing": 0, // require or disallow spacing around embedded expressions of template strings
        "yield-star-spacing": 0, // require or disallow spacing around the * in yield* expressions

        /********* Legacy *********/

        "no-plusplus": 0 // disallow use of unary operators, ++ and -- (off by default)
    }
}
